#!/usr/bin/env python3
"""
Script de test pour le mod√®le Aave vs Morpho
Simule des donn√©es CoinGecko pour tester le mod√®le sans API
"""

import json
import sys
import os
from datetime import datetime, timezone

# Ajouter le r√©pertoire courant au path pour importer le mod√®le
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

try:
    from model import run, compute_regime, score_protocols, recommend
except ImportError as e:
    print(f"Erreur d'import du mod√®le: {e}")
    sys.exit(1)

def create_mock_data():
    """Cr√©e des donn√©es factices au format attendu par le mod√®le"""
    return {
        "btc_dominance": {"value": 52.3},
        "defi_tvl": {"value": 120000000000},  # 120B USD
        "volumes": {
            "cex_24h_btc": 45000,  # Volume CEX en BTC
            "dex_24h_btc": 5000    # Volume DEX en BTC
        },
        "stablecoins": {
            "usdt": {"deviation": "0.12%"},  # L√©g√®re d√©viation
            "usdc": {"deviation": "-0.08%"}
        },
        "timestamp": datetime.now(timezone.utc).isoformat()
    }

def test_model_components():
    """Test les composants individuels du mod√®le"""
    print("üß™ Test des composants du mod√®le...")
    
    mock_data = create_mock_data()
    
    try:
        # Test 1: Calcul du r√©gime
        regime = compute_regime(mock_data)
        print(f"‚úÖ R√©gime calcul√©:")
        print(f"   Risk-off: {regime.risk_off:.3f}")
        print(f"   Activit√© on-chain: {regime.onchain_activity:.3f}")
        print(f"   Stabilit√© peg: {regime.peg_stability:.3f}")
        
        # Test 2: Scores des protocoles
        scores = score_protocols(regime)
        print(f"‚úÖ Scores calcul√©s:")
        print(f"   Aave: {scores.aave:.3f}")
        print(f"   Morpho: {scores.morpho:.3f}")
        
        # Test 3: Recommandation finale
        recommendation = recommend(scores)
        print(f"‚úÖ Recommandation: {recommendation['suggestion']}")
        print(f"   Confiance: {recommendation['confidence']:.1%}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur dans les composants: {e}")
        return False

def test_full_model():
    """Test du mod√®le complet en mode simulation"""
    print("\nüéØ Test du mod√®le complet...")
    
    try:
        # Cr√©er un fichier temporaire avec des donn√©es factices
        mock_data = {
            "success": True,
            "data": create_mock_data()
        }
        
        # Simuler l'appel du mod√®le avec des donn√©es factices
        import tempfile
        import http.server
        import socketserver
        import threading
        import time
        
        # Cr√©er un serveur HTTP temporaire pour servir les donn√©es
        class MockHandler(http.server.BaseHTTPRequestHandler):
            def do_GET(self):
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps(mock_data).encode())
            
            def log_message(self, format, *args):
                return  # Supprimer les logs
        
        # D√©marrer le serveur sur un port libre
        port = 9999
        with socketserver.TCPServer(("", port), MockHandler) as httpd:
            # D√©marrer le serveur dans un thread
            server_thread = threading.Thread(target=httpd.serve_forever)
            server_thread.daemon = True
            server_thread.start()
            
            print(f"üì° Serveur mock d√©marr√© sur port {port}")
            
            # Attendre que le serveur soit pr√™t
            time.sleep(0.5)
            
            # Tester le mod√®le avec l'URL mock
            mock_url = f"http://localhost:{port}/api/mock-data"
            result = run(mock_url)
            
            # Arr√™ter le serveur
            httpd.shutdown()
            
            print("‚úÖ Mod√®le ex√©cut√© avec succ√®s!")
            print("üìä R√©sultat:")
            print(json.dumps(result, indent=2))
            
            return True
            
    except Exception as e:
        print(f"‚ùå Erreur dans le test complet: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Fonction principale de test"""
    print("üß™ Test du mod√®le Python Aave vs Morpho\n")
    
    # Test des imports
    print("üì¶ V√©rification des imports...")
    try:
        import requests
        print("‚úÖ requests import√©")
    except ImportError:
        print("‚ùå requests manquant")
        return False
    
    try:
        import json
        print("‚úÖ json disponible")
    except ImportError:
        print("‚ùå json manquant")
        return False
    
    # Test des composants
    if not test_model_components():
        return False
    
    # Test complet
    if not test_full_model():
        return False
    
    print("\nüéâ Tous les tests pass√©s!")
    print("Le mod√®le Python est op√©rationnel.")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
